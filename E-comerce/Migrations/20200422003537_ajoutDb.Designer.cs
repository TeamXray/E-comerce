// <auto-generated />
using System;
using E_comerce.Dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_comerce.Migrations
{
    [DbContext(typeof(Datacontextcs))]
    [Migration("20200422003537_ajoutDb")]
    partial class ajoutDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("E_comerce.Entity.Autre", b =>
                {
                    b.Property<int>("AutreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("typeautre")
                        .HasColumnName("TypeAutre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AutreId");

                    b.HasIndex("CategorieId");

                    b.ToTable("autres");
                });

            modelBuilder.Entity("E_comerce.Entity.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LabelId")
                        .HasColumnType("int");

                    b.HasKey("CategorieId");

                    b.HasIndex("LabelId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("E_comerce.Entity.Immeuble", b =>
                {
                    b.Property<int>("ImmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int>("TypeImmId")
                        .HasColumnType("int");

                    b.HasKey("ImmId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("TypeImmId");

                    b.ToTable("immeubles");
                });

            modelBuilder.Entity("E_comerce.Entity.LabelCat", b =>
                {
                    b.Property<int>("LabelId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("LabelId");

                    b.ToTable("labelCats");
                });

            modelBuilder.Entity("E_comerce.Entity.Produit", b =>
                {
                    b.Property<int>("id_prod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnName("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnName("Nom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("prix")
                        .HasColumnName("Prix")
                        .HasColumnType("float");

                    b.Property<int>("quantite")
                        .HasColumnName("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("solde")
                        .HasColumnName("Solde")
                        .HasColumnType("int");

                    b.HasKey("id_prod");

                    b.HasIndex("CategorieId");

                    b.ToTable("produits");
                });

            modelBuilder.Entity("E_comerce.Entity.Technologie", b =>
                {
                    b.Property<int>("TechId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int>("TypeTechId")
                        .HasColumnType("int");

                    b.Property<string>("marque")
                        .HasColumnName("Marque")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TechId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("TypeTechId");

                    b.ToTable("technologies");
                });

            modelBuilder.Entity("E_comerce.Entity.TypeImm", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TypeId");

                    b.ToTable("typeImms");
                });

            modelBuilder.Entity("E_comerce.Entity.TypeTech", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TypeId");

                    b.ToTable("typeTechs");
                });

            modelBuilder.Entity("E_comerce.Entity.TypeVet", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnName("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TypeId");

                    b.ToTable("typeVets");
                });

            modelBuilder.Entity("E_comerce.Entity.Users", b =>
                {
                    b.Property<int>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Roles")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Token")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Userid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("E_comerce.Entity.Vetement", b =>
                {
                    b.Property<int>("VetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int>("TypeVetId")
                        .HasColumnType("int");

                    b.Property<string>("couleur")
                        .HasColumnName("Couleur")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("marque")
                        .HasColumnName("Marque")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("mode")
                        .HasColumnName("Mode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("taille")
                        .HasColumnName("Taille")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("VetId");

                    b.HasIndex("CategorieId");

                    b.HasIndex("TypeVetId");

                    b.ToTable("vetements");
                });

            modelBuilder.Entity("E_comerce.Entity.Autre", b =>
                {
                    b.HasOne("E_comerce.Entity.Categorie", "categorie")
                        .WithMany("autres")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_comerce.Entity.Categorie", b =>
                {
                    b.HasOne("E_comerce.Entity.LabelCat", "LabelCat")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_comerce.Entity.Immeuble", b =>
                {
                    b.HasOne("E_comerce.Entity.Categorie", "categorie")
                        .WithMany("immeubles")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_comerce.Entity.TypeImm", "TypeImm")
                        .WithMany()
                        .HasForeignKey("TypeImmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_comerce.Entity.Produit", b =>
                {
                    b.HasOne("E_comerce.Entity.Categorie", "categorie")
                        .WithMany("produits")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_comerce.Entity.Technologie", b =>
                {
                    b.HasOne("E_comerce.Entity.Categorie", "categorie")
                        .WithMany("technologies")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_comerce.Entity.TypeTech", "TypeTech")
                        .WithMany()
                        .HasForeignKey("TypeTechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_comerce.Entity.Vetement", b =>
                {
                    b.HasOne("E_comerce.Entity.Categorie", "categorie")
                        .WithMany("vetements")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_comerce.Entity.TypeVet", "TypeVet")
                        .WithMany()
                        .HasForeignKey("TypeVetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
